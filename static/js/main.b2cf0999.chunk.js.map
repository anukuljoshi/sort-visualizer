{"version":3,"sources":["components/input/buttons.js","helpers/mergeSort.js","helpers/bubbleSort.js","helpers/selectionSort.js","helpers/insertionSort.js","helpers/quickSort.js","helpers/heapSort.js","components/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","value","clickFunction","className","onClick","mergeSort","array","animations","length","tempArray","slice","mergeSortHelper","mainArray","start","end","mid","Math","floor","merge","i","j","k","push","bubbleSort","n","swap","temp","selectionSort","index","insertionSort","console","log","key","quickSort","quickSortHelper","low","high","p","partition","pivot","heapSort","heapify","largest","left","right","generateRandomNumbers","min","max","nums","random","SortingVisualizer","useState","setArray","disableButtons","btns","document","getElementsByClassName","disabled","classList","remove","add","enableButtons","asyncTimeout","ms","Promise","resolve","setTimeout","handleCompareValues","index1","index2","color","graphBars","a","style","backgroundColor","handleSwapValues","height","animate","isComparison","mergeSortCall","bubbleSortCall","selectionSortCall","insertionSortCall","quickSortCall","heapSortCall","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b2cf0999.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Button = (props) => {\n    const { value, clickFunction } = props;\n\n    const handleClick = () => {\n        clickFunction()\n    }\n\n    return (\n        <button className=\"btn input-btn\" onClick={handleClick}>\n            { value }\n        </button>\n    )\n}","export const  mergeSort = (array) => {\n    const animations = [];\n    if(array.length<=1){\n        return array;\n    }\n    const tempArray = array.slice();\n    mergeSortHelper(array, 0, array.length-1, tempArray, animations);\n    return animations;\n}\n\nconst mergeSortHelper = (mainArray, start, end, tempArray, animations=[]) => {\n    if(start===end){\n        return;\n    }\n    const mid = Math.floor((start+end)/2);\n    mergeSortHelper(tempArray, start, mid, mainArray, animations);\n    mergeSortHelper(tempArray, mid+1, end, mainArray, animations);\n    merge(mainArray, start, mid, end, tempArray, animations);\n}\n\nconst merge = (mainArray, start, mid, end, tempArray, animations) => {\n    let i = start;\n    let j = mid+1;\n    let k = start;\n\n    while(i<=mid && j<=end){\n        animations.push(['compare_start', i, j]);\n        animations.push(['compare_end', i, j]);\n        if(tempArray[i]<=tempArray[j]){\n            animations.push(['swap', k, tempArray[i]]);\n            // animations.push(['swap', i, tempArray[k]]);\n            mainArray[k] = tempArray[i]\n            i += 1;\n            k += 1;\n        }else{\n            animations.push(['swap', k, tempArray[j]]);\n            // animations.push(['swap', j, tempArray[k]]);\n            mainArray[k] = tempArray[j];\n            j += 1;\n            k += 1;\n        }\n    }\n    while(i<=mid){\n        animations.push(['compare_start', i, i]);\n        animations.push(['compare_end', i, i]);\n        animations.push(['swap', k, tempArray[i]]);\n        // animations.push(['swap', i, tempArray[k]]);\n        mainArray[k] = tempArray[i];\n        i += 1;\n        k += 1;\n    }\n    while(j<=end){\n        animations.push(['compare_start', j, j]);\n        animations.push(['compare_end', j, j]);\n        animations.push(['swap', k, tempArray[j]]);\n        // animations.push(['swap', j, tempArray[k]]);\n        mainArray[k] = tempArray[j];\n        j += 1;\n        k += 1;\n    }\n}","export const bubbleSort = (array) => {\n    const n = array.length;\n    const animations = [];\n    for(let i=0;i<n-1;i++){\n        for(let j=0;j<n-1-i;j++){\n            animations.push(['compare_start', j, j+1]);\n            animations.push(['compare_end', j, j+1]);\n            if(array[j]>array[j+1]){\n                animations.push(['swap', j, array[j+1]])\n                animations.push(['swap', j+1, array[j]])\n                swap(array, j, j+1);\n            }\n        }\n    }\n    return animations;\n}\n\nconst swap = (array, i, j) => {\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n}","export const selectionSort = (array) => {\n    const animations = [];\n    const n = array.length;\n    for(let i=0;i<n-1;i++){\n        let index = i;\n        for(let j=i+1;j<n;j++){\n            animations.push(['compare_start', i, j]);\n            animations.push(['compare_end', i, j]);\n            if(array[j]<array[index]){\n                index = j;\n            }\n        }\n        animations.push(['swap', index, array[i]]);\n        animations.push(['swap', i, array[index]]);\n        swap(array, index, i);\n    }\n    return animations;\n}\n\nconst swap = (array, i, j) => {\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n}","export const insertionSort = (array) => {\n    const animations = [];\n    const n = array.length;\n    console.log(array)\n    for(let i=1;i<n;i++){\n        let j = i-1;\n        let key = array[i];\n        while(j>=0 && key<array[j]){\n            animations.push(['compare_start', j+1, j]);\n            animations.push(['compare_end', j+1, j]);\n            animations.push(['swap', j, array[j+1]]);\n            animations.push(['swap', j+1, array[j]]);\n            array[j+1] = array[j];\n            j--;\n        }\n        animations.push(['swap', j+1, key]);\n        // animations.push(['swap', i, array[j+1]]);\n        array[j+1] = key;\n    }\n    return animations;\n}\n","export const quickSort = (array) => {\n    const n = array.length;\n    const animations = [];\n    quickSortHelper(array, 0, n-1, animations);\n    return animations;\n}\n\nconst quickSortHelper = (array, low, high, animations) => {\n    if(low<high){\n        let p = partition(array, low, high, animations);\n        quickSortHelper(array, low, p-1, animations);\n        quickSortHelper(array, p+1, high, animations);\n    }\n}\n\nconst partition = (array, low, high, animations) => {\n    let pivot = array[high];\n    let k = low;\n    for(let i=low;i<high;i++){\n        animations.push(['compare_start', i, high]);\n        animations.push(['compare_end', i, high]);\n        if(array[i]<=pivot){\n            // animations.push(['compare_start', i, k]);\n            animations.push(['swap', i, array[k]]);\n            animations.push(['swap', k, array[i]]);\n            // animations.push(['compare_end', i, k]);\n            swap(array, i, k);\n            k++;\n        }\n    }\n    // animations.push(['compare_start', k, high]);\n    animations.push(['swap', high, array[k]]);\n    animations.push(['swap', k, array[high]]);\n    // animations.push(['compare_end', k, high]);\n    swap(array, k, high);\n    return k;\n}\n\nconst swap = (array, i, j) => {\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n}","export const heapSort = (array) => {\n    const n = array.length;\n    const animations = [];\n    for (let i=Math.floor(n/2)-1;i>-1;i--){\n        heapify(array, n, i, animations);\n    }\n    for(let i=n-1;i>0;i--){\n        animations.push(['swap', i, array[0]]);\n        animations.push(['swap', 0, array[i]]);\n        swap(array, i, 0);\n        heapify(array, i, 0, animations);\n    }\n    return animations;\n}\n\nconst heapify = (array, n, i, animations) => {\n    let largest = i;\n    let left = 2*i+1;\n    let right = 2*i+2;\n    if(left<n && array[i]<array[left]){\n        animations.push(['compare_start', i, left]);\n        animations.push(['compare_end', i, left]);\n        largest = left;\n    }\n    if(right<n && array[largest]<array[right]){\n        animations.push(['compare_start', i, right]);\n        animations.push(['compare_end', i, right]);\n        largest = right;\n    }\n    if(largest!==i){\n        animations.push(['swap', i, array[largest]]);\n        animations.push(['swap', largest, array[i]]);\n        swap(array, i, largest);\n        heapify(array, n, largest, animations);\n    }\n}\n\nconst swap = (array, i, j) => {\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n}","import React, { useState } from 'react';\nimport { Button } from './input/buttons';\nimport { mergeSort } from '../helpers/mergeSort';\nimport { bubbleSort } from '../helpers/bubbleSort';\nimport { selectionSort } from '../helpers/selectionSort';\nimport { insertionSort } from '../helpers/insertionSort';\nimport { quickSort } from '../helpers/quickSort';\nimport { heapSort } from '../helpers/heapSort';\n\nconst TIMEOUT = 5;\nconst PRIMARY_COLOR = '#0a8d80'; //Normal color of bars\nconst SECONDARY_COLOR = '#FF00FF'; //Color of bars when they are being compared\nconst SIZE_OF_ARRAY = 50;\nconst MIN_VALUE = 20;\nconst MAX_VALUE = 500;\n\nconst generateRandomNumbers = (n, min, max) => {\n    let nums = [];\n    for(let i=0;i<n;i++){\n        nums.push(Math.floor(Math.random() * (max - min) + min));\n    }\n    return nums;\n}\n\nconst SortingVisualizer = (props) => {\n    const [array, setArray] = useState(generateRandomNumbers(SIZE_OF_ARRAY, MIN_VALUE, MAX_VALUE));\n\n    const resetArray = () => {\n        setArray(generateRandomNumbers(SIZE_OF_ARRAY, MIN_VALUE, MAX_VALUE));\n        enableButtons();\n    }\n\n    const disableButtons = () => {\n        const btns = document.getElementsByClassName('btn');\n        for(let i=0;i<btns.length;i++){\n            btns[i].disabled = true;\n            btns[i].classList.remove('input-btn');\n            btns[i].classList.add('disabled-btn');\n        }\n    }\n\n    const enableButtons = () => {\n        const btns = document.getElementsByClassName('btn');\n        for(let i=0;i<btns.length;i++){\n            btns[i].disabled = false;\n            btns[i].classList.remove('disabled-btn');\n            btns[i].classList.add('input-btn');\n        }\n    }\n\n    // normal timeout function does not return a Promise therefore cannot be used in an async/await function\n    const asyncTimeout = (ms) => {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    const handleCompareValues = async (index1, index2, i, color, graphBars) => {\n        await asyncTimeout(TIMEOUT);\n        graphBars[index1].style.backgroundColor = color;\n        graphBars[index2].style.backgroundColor = color;\n    }\n\n    const handleSwapValues = async (index, value, i, graphBars) => {\n        await asyncTimeout(TIMEOUT);\n        graphBars[index].style.height = value + 'px';\n    }\n\n    const animate = async (animations) => {\n        for(let i=0;i<animations.length;i++){\n            const isComparison = (animations[i][0]==='compare_start') ||(animations[i][0]==='compare_end');\n            const graphBars = document.getElementsByClassName('graph-bar');\n        \n            if(isComparison===true){\n                const [comparison, index1, index2] = animations[i];\n                const color = (animations[i][0]==='compare_start') ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n                if(index1<0 || index1>=array.length){\n                    continue;\n                }\n                if(index2<0 || index2>=array.length){\n                    continue;\n                }\n                await handleCompareValues(index1, index2,  i, color, graphBars);\n            }\n            else{\n                const [swap, index, value] = animations[i];\n                if(index<0 || index>=array.length){\n                    continue;\n                }\n                await handleSwapValues(index, value, i, graphBars);\n            }\n        }\n    }\n\n    const mergeSortCall = async () => {\n        disableButtons();\n        const animations = mergeSort(array);\n        await animate(animations);\n        enableButtons();\n    }\n\n    const bubbleSortCall = async () => {\n        disableButtons();\n        const animations = bubbleSort(array);\n        await animate(animations);\n        enableButtons();\n    }\n\n    const selectionSortCall = async () => {\n        disableButtons();\n        const animations = selectionSort(array);\n        await animate(animations);\n        enableButtons();\n    }\n    \n    const insertionSortCall = async () => {\n        disableButtons();\n        const animations = insertionSort(array);\n        await animate(animations);\n        enableButtons();\n    }\n    \n    const quickSortCall = async () => {\n        disableButtons();\n        const animations = quickSort(array);\n        await animate(animations);\n        enableButtons();\n    }\n\n    const heapSortCall = async () => {\n        disableButtons();\n        const animations = heapSort(array);\n        await animate(animations);\n        enableButtons();\n    }\n\n    return (\n        <>\n            <div className=\"input-container\">\n                <div className=\"btn-group\">\n                    <Button value=\"Reset Array\" clickFunction={resetArray} />\n                    <Button value=\"Bubble Sort\" clickFunction={bubbleSortCall} />\n                    <Button value=\"Selection Sort\" clickFunction={selectionSortCall} />\n                    <Button value=\"Insertion Sort\" clickFunction={insertionSortCall} />\n                    <Button value=\"Quick Sort\" clickFunction={quickSortCall} />\n                    <Button value=\"Merge Sort\" clickFunction={mergeSortCall} />\n                    <Button value=\"Heap Sort\" clickFunction={heapSortCall} />\n                </div>\n            </div>\n            <div className=\"graph-container\">\n                <div className=\"graph\">\n                    {\n                        array.map((value, index) => {\n                            return (\n                                <div \n                                    className=\"graph-bar\" \n                                    style={\n                                        {\n                                            'height' : `${value}px`,\n                                            'width' : `${14}px`,\n                                            'marginRight' : `${1}px`\n                                        }\n                                    }\n                                    key={index}\n                                >\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default SortingVisualizer;","import React from 'react';\nimport SortingVisualizer from './components/SortingVisualizer';\n\nfunction App() {\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"main-container\">\n\t\t\t\t<SortingVisualizer />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}